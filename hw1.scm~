;;;;Author:Kai Ren
;;;;ID #:3941426                
;;;;Lab Section:003


;;; Utility Functions

;; Reloads the current file.
(define (reload)
  (load "hw1.scm")  ; Change file name if copied to a new file.
)
(define (square x) (* x x))

;;;; Problem 1 - Code Evaluation
;===========Part A==========
(- 9 2 4)

;Solution:3
;Explanation of solution:9-2-4=3

(/ 32 (+ 3 2))

;Solution:32/5
;Explanation of solution:32/(3+2)=32/5

(* (- (+ 4 7) (* 2 3)) 7)

;Solution:35
;Explanation of solution:((4+7)-(2*3))*7=35

;===========Part B==========
(define a 7)
(define b 4)
(define c 32)

(and (or (> a b) (= a c))
    (< a b)
    (> 2013 2012))

;Solution:false
;Explanation of solution:The or expression is true since (> a b) is true. But the and expression is false, because the second expression (< a b) is false, and the third expression is not evaluated. So the eventual result is false.

;===========Part C==========
(define x 4)

(define (inc x) (+ x 1))

(inc (square (inc (square x))))

;Solution:290
;Explanation of solution:(4^2+1)^2+1=290



;;;; Problem 2 - Conditional Procedure
(define (compute a b c)
(if (and (< a 0) (< b 0) (< c 0))
     ((* a a) (* 2 (* a b)) (/ (* b b) (* 7 c))) 
     (cond (and ((or (> a b) (= a b)) (or (> b c) (= b c)) (+ (* a a) (* b b)))
           (and ((or (> b a) (= b a)) (or (> a c) (= a c)) (+ (* b b) (* c c)))
           (and ((or (> a c) (= a c)) (or (> c b) (= c b)) (+ (* a a) (* c c)))
             )))

;; Test Cases for compute
(display "== Compute Test Cases ==") (newline)
(display (compute -8 -6 -14)) (newline) ; Case 1 result = -2
(display (compute 1 0 0)) (newline) ; Case 2 result = 1
(display (compute -1 0 -1)) (newline) ; Case 3 result = -1/7
(display (compute -1 -2 3)) (newline) ; Case 4 result = 10
(display (compute -10 9 6)) (newline) ; Case 5 result = 117
(display (compute 4 2 4)) (newline) ; Case 6 result = 32


;;;; Problem 3 - Special Forms

(define (p) (p))

(define (test x y)
  (if (= x 0)
      0
      y))

(test 0 (p));result = 0

;;Explanation of results
;;The application-order evaluation would proceed as follows
;;(test 0 (p))
;;(test 0 (p))
;;... it leads to a infinite recursion loop and would not stop
;;The normal-order evaluation would proceed as follows
;;(test 0 (p))
;;(if (= 0 0) 0 (p))
;;(if #t 0 (p))
;;0 
;;
;;
;;


;;;; Problem 4 - Creating Tests

(define (test-proc a b c)
  (cond ((and (> a b ) (> a c)) (* 1.0 (/ (+ b c) a)))
        ((and (> b a ) (> b c)) (- (+ a c) (square b)))
        ((and (> c a ) (> c b)) (- (* c c) 1))
        ((= a b c) (- (square a) (+ b c)))))

(display "== Problem 4 Test Cases ==") (newline)
(display (test-proc 3 2 1))(newline);result = 6
(display (test-proc 1 3 2))(newline);result = -1
(display (test-proc 1 2 3))(newline);result = 8
(display (test-proc 1 1 1))(newline);result = 1


